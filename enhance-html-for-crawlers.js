/**
 * Enhance HTML for Crawlers
 * 
 * This script enhances the static HTML files generated by generate-html-pages.js
 * to include machine-readable content for crawlers and AI systems.
 */

const fs = require('fs');
const path = require('path');

console.log('Starting HTML enhancement for crawlers...');

// Function to extract FAQ content from FAQ.js
function extractFAQContent() {
  try {
    const faqPath = path.resolve(__dirname, 'src/Components/FAQ.js');
    const faqContent = fs.readFileSync(faqPath, 'utf8');
    
    // Extract FAQ data using regex
    const faqCategoriesMatch = faqContent.match(/const faqCategories = ({[\s\S]*?});/);
    
    if (faqCategoriesMatch) {
      let staticHtml = '<div id="crawler-content" style="display:none;" aria-hidden="true">\n';
      staticHtml += '  <h1>WhimsyLabs - Frequently Asked Questions</h1>\n';
      
      // Parse the FAQ categories object
      const categoriesText = faqCategoriesMatch[1];
      const categoryMatches = [...categoriesText.matchAll(/"([^"]+)":\s*\[([\s\S]*?)(?=\],|}\);)/g)];
      
      for (const match of categoryMatches) {
        const category = match[1];
        const items = match[2];
        
        staticHtml += `  <h2>${category}</h2>\n`;
        
        // Extract questions and answers
        const qaMatches = [...items.matchAll(/{\s*question:\s*"([^"]+)",\s*answer:\s*"([^"]+)"\s*}/g)];
        
        for (const qaMatch of qaMatches) {
          const question = qaMatch[1];
          const answer = qaMatch[2];
          
          staticHtml += `  <div itemscope itemtype="https://schema.org/Question">\n`;
          staticHtml += `    <h3 itemprop="name">${question}</h3>\n`;
          staticHtml += `    <div itemscope itemtype="https://schema.org/Answer" itemprop="acceptedAnswer">\n`;
          staticHtml += `      <div itemprop="text">${answer}</div>\n`;
          staticHtml += `    </div>\n`;
          staticHtml += `  </div>\n`;
        }
      }
      
      staticHtml += '</div>';
      
      return staticHtml;
    }
  } catch (error) {
    console.error('Error extracting FAQ content:', error);
  }
  
  return '';
}

// Function to extract blog posts content
function extractBlogPostsContent() {
  try {
    const blogDir = path.resolve(__dirname, 'src/Components/blog');
    const files = fs.readdirSync(blogDir);
    
    // Filter for Post*.js files
    const postFiles = files.filter(file => /^Post\d+\.js$/.test(file));
    const posts = [];
    
    postFiles.forEach(file => {
      const filePath = path.join(blogDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      
      // Extract post metadata using regex
      const titleMatch = content.match(/export const title = ["'](.+?)["'];/);
      const dateMatch = content.match(/export const date = ["'](.+?)["'];/);
      const slugMatch = content.match(/export const slug = ["'](.+?)["'];/);
      const descriptionMatch = content.match(/export const description =\s*["'](.+?)["'];/);
      
      if (titleMatch && dateMatch && slugMatch && descriptionMatch) {
        posts.push({
          title: titleMatch[1],
          date: dateMatch[1],
          slug: slugMatch[1],
          description: descriptionMatch[1]
        });
      }
    });
    
    // Sort posts by date (newest first)
    posts.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    let staticHtml = '<div id="crawler-content" style="display:none;" aria-hidden="true">\n';
    staticHtml += '  <h1>WhimsyLabs Blog</h1>\n';
    staticHtml += '  <p>Latest Virtual Laboratory Innovations & Teaching Resources</p>\n';
    
    posts.forEach(post => {
      staticHtml += `  <article itemscope itemtype="https://schema.org/BlogPosting">\n`;
      staticHtml += `    <h2 itemprop="headline">${post.title}</h2>\n`;
      staticHtml += `    <meta itemprop="datePublished" content="${post.date}">\n`;
      staticHtml += `    <p>Published: ${post.date}</p>\n`;
      staticHtml += `    <div itemprop="description">${post.description}</div>\n`;
      staticHtml += `    <a href="/blog/${post.slug}" itemprop="url">Read More</a>\n`;
      staticHtml += `  </article>\n`;
    });
    
    staticHtml += '</div>';
    
    return staticHtml;
  } catch (error) {
    console.error('Error extracting blog posts content:', error);
  }
  
  return '';
}

// Function to extract individual blog post content
function extractBlogPostContent(slug) {
  try {
    const blogDir = path.resolve(__dirname, 'src/Components/blog');
    const files = fs.readdirSync(blogDir);
    
    // Filter for Post*.js files
    const postFiles = files.filter(file => /^Post\d+\.js$/.test(file));
    
    for (const file of postFiles) {
      const filePath = path.join(blogDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      
      // Extract post metadata using regex
      const slugMatch = content.match(/export const slug = ["'](.+?)["'];/);
      
      if (slugMatch && slugMatch[1] === slug) {
        const titleMatch = content.match(/export const title = ["'](.+?)["'];/);
        const dateMatch = content.match(/export const date = ["'](.+?)["'];/);
        const descriptionMatch = content.match(/export const description =\s*["'](.+?)["'];/);
        
        // Try to extract post content - this might be in different formats
        let postContent = '';
        const contentMatch1 = content.match(/export const content = \(\s*<div>([\s\S]*?)<\/div>\s*\);/);
        const contentMatch2 = content.match(/export const content = `([\s\S]*?)`;/);
        
        if (contentMatch1) {
          postContent = contentMatch1[1];
        } else if (contentMatch2) {
          postContent = contentMatch2[1];
        }
        
        if (titleMatch && dateMatch && descriptionMatch) {
          const title = titleMatch[1];
          const date = dateMatch[1];
          const description = descriptionMatch[1];
          
          let staticHtml = '<div id="crawler-content" style="display:none;" aria-hidden="true">\n';
          staticHtml += `  <article itemscope itemtype="https://schema.org/BlogPosting">\n`;
          staticHtml += `    <h1 itemprop="headline">${title}</h1>\n`;
          staticHtml += `    <meta itemprop="datePublished" content="${date}">\n`;
          staticHtml += `    <p>Published: ${date}</p>\n`;
          staticHtml += `    <div itemprop="description">${description}</div>\n`;
          staticHtml += `    <div itemprop="articleBody">${postContent}</div>\n`;
          staticHtml += `  </article>\n`;
          staticHtml += '</div>';
          
          return staticHtml;
        }
      }
    }
  } catch (error) {
    console.error(`Error extracting blog post content for slug ${slug}:`, error);
  }
  
  return '';
}

// Function to enhance HTML files
function enhanceHtmlFiles() {
  const buildDir = path.resolve(__dirname, 'build');
  
  // Verify that the build directory exists
  if (!fs.existsSync(buildDir)) {
    throw new Error(`Build directory not found at ${buildDir}. Run 'npm run build' first.`);
  }
  
  // Enhance FAQ page
  const faqHtmlPath = path.join(buildDir, 'faq', 'index.html');
  if (fs.existsSync(faqHtmlPath)) {
    try {
      let faqHtml = fs.readFileSync(faqHtmlPath, 'utf8');
      const faqContent = extractFAQContent();
      
      // Add the FAQ content before the closing body tag
      if (faqContent) {
        faqHtml = faqHtml.replace('</body>', `${faqContent}\n</body>`);
        fs.writeFileSync(faqHtmlPath, faqHtml);
        console.log('Enhanced FAQ page with machine-readable content');
      }
    } catch (error) {
      console.error('Error enhancing FAQ page:', error);
    }
  }
  
  // Enhance blog index page
  const blogHtmlPath = path.join(buildDir, 'blog', 'index.html');
  if (fs.existsSync(blogHtmlPath)) {
    try {
      let blogHtml = fs.readFileSync(blogHtmlPath, 'utf8');
      const blogContent = extractBlogPostsContent();
      
      // Add the blog content before the closing body tag
      if (blogContent) {
        blogHtml = blogHtml.replace('</body>', `${blogContent}\n</body>`);
        fs.writeFileSync(blogHtmlPath, blogHtml);
        console.log('Enhanced blog index page with machine-readable content');
      }
    } catch (error) {
      console.error('Error enhancing blog index page:', error);
    }
  }
  
  // Enhance individual blog post pages
  const blogDir = path.join(buildDir, 'blog');
  if (fs.existsSync(blogDir)) {
    try {
      const entries = fs.readdirSync(blogDir, { withFileTypes: true });
      
      // Filter for directories (these are the blog post slug directories)
      const slugDirs = entries.filter(entry => entry.isDirectory() && entry.name !== 'static');
      
      for (const slugDir of slugDirs) {
        const slug = slugDir.name;
        const postHtmlPath = path.join(blogDir, slug, 'index.html');
        
        if (fs.existsSync(postHtmlPath)) {
          let postHtml = fs.readFileSync(postHtmlPath, 'utf8');
          const postContent = extractBlogPostContent(slug);
          
          // Add the post content before the closing body tag
          if (postContent) {
            postHtml = postHtml.replace('</body>', `${postContent}\n</body>`);
            fs.writeFileSync(postHtmlPath, postHtml);
            console.log(`Enhanced blog post page for "${slug}" with machine-readable content`);
          }
        }
      }
    } catch (error) {
      console.error('Error enhancing blog post pages:', error);
    }
  }
}

// Run the enhancement process
// Function to verify that the enhanced files were created properly
function verifyEnhancedFiles() {
  const buildDir = path.resolve(__dirname, 'build');
  let success = true;
  let enhancedCount = 0;
  
  // Check blog index
  const blogIndexPath = path.join(buildDir, 'blog', 'index.html');
  if (fs.existsSync(blogIndexPath)) {
    const content = fs.readFileSync(blogIndexPath, 'utf8');
    if (content.includes('id="crawler-content"')) {
      enhancedCount++;
    } else {
      console.warn('Warning: Blog index page does not contain enhanced content');
      success = false;
    }
  }
  
  // Check FAQ page
  const faqPath = path.join(buildDir, 'faq', 'index.html');
  if (fs.existsSync(faqPath)) {
    const content = fs.readFileSync(faqPath, 'utf8');
    if (content.includes('id="crawler-content"')) {
      enhancedCount++;
    } else {
      console.warn('Warning: FAQ page does not contain enhanced content');
      success = false;
    }
  }
  
  // Check at least one blog post
  const blogDir = path.join(buildDir, 'blog');
  if (fs.existsSync(blogDir)) {
    const entries = fs.readdirSync(blogDir, { withFileTypes: true });
    const slugDirs = entries.filter(entry => entry.isDirectory() && entry.name !== 'static');
    
    if (slugDirs.length > 0) {
      const firstPostPath = path.join(blogDir, slugDirs[0].name, 'index.html');
      if (fs.existsSync(firstPostPath)) {
        const content = fs.readFileSync(firstPostPath, 'utf8');
        if (content.includes('id="crawler-content"')) {
          enhancedCount++;
        } else {
          console.warn(`Warning: Blog post ${slugDirs[0].name} does not contain enhanced content`);
          success = false;
        }
      }
    }
  }
  
  return { success, enhancedCount };
}

try {
  console.log('Starting HTML enhancement for crawlers...');
  enhanceHtmlFiles();
  
  // Verify the enhanced files
  const verification = verifyEnhancedFiles();
  if (verification.success) {
    console.log(`HTML enhancement completed successfully! Enhanced ${verification.enhancedCount} files.`);
  } else {
    console.warn(`HTML enhancement completed with warnings. Enhanced ${verification.enhancedCount} files.`);
  }
} catch (error) {
  console.error('Error during HTML enhancement:', error);
  process.exit(1); // Exit with error code to indicate failure
}

// Export the verification function for use in npm scripts
module.exports = {
  verifyEnhancedFiles
};